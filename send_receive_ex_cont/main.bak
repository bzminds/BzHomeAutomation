/******************************************************************************/
/* main.c   Dr. Juan Gonzalez Gomez. January 2009                     */
/*----------------------------------------------------------------------------*/
/* Example of Serial communications in Linux.                                 */
/* Sending and receiving data strings                                         */
/*----------------------------------------------------------------------------*/
/* GPL LICENSE                                                                */
/*----------------------------------------------------------------------------*/
/* This example sends a ASCII string to the serial port. It waits for the     */
/* same string to be echoed by another device (For example a microcontroller  */
/* running an echo-firmware or a wire joining the PC tx and rx pins           */
/* The received string is print on the screen. If no data is received         */
/* during the TIMEOUT time, a timeout message is printed                      */
/*                                                                            */
/* The serial port speed is configured to 9600 baud                           */
/*----------------------------------------------------------------------------*/
/* Example of use:                                                            */
/*                                                                            */
/*   ./send_receive /dev/ttyUSB0 0108ABCD01234FFFFFF                          */
/*                                                                            */
/*    First parameter -> Serial device name                                   */
/*    Second parameter -> Command to be sent                                  */
/*                                                                            */
/*                                                                            */
/*                                                                            */
/*                                                                            */
/*                                                                            */
/*  When executing this example, if the echoed data is received the           */
/*  output will be the following:                                             */
/*                                                                            */
/*    String sent------> ASCII Command test                                   */
/*    String received--> ASCII Command test (18 bytes)                        */
/*                                                                            */
/*  If no data is received, the output will be:                               */
/*    String sent------> ASCII Command test                                   */
/*    String received--> Timeout!                                             */
/*                                                                            */
/*----------------------------------------------------------------------------*/
/*  In linux, the serial devices names are:                                   */
/*                                                                            */
/*    /dev/ttyS0  --> First native serial port                                */
/*    /dev/ttyS1  --> Second native serial port                               */
/*    ...                                                                     */
/*    /dev/ttyUSB0  --> First USB-RS232 converter                             */
/*    /dev/ttyUSB1  --> Second USB-RS232 converter                            */
/*    ...                                                                     */
/******************************************************************************/

#include <termios.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "serial.h"
#include "main.h"
#include "bzfunctions.h"

char device[MAX_DEVICE_NAME]; /* serial device name */
char message[MAX_MESSAGE_LENGTH]; /* message content */

//------------------
//-- CONSTANTS
//------------------

//-- ASCII string to send through the serial port
//#define CMD       "ASCII Command test"

//-- ASCII String length
#define CMD_LEN   51

//--TIMEOUT in micro-sec (It is set to 1 sec in this example)
#define TIMEOUT 10000000

//-- Stdout messages

/**********************/
/*  MAIN PROGRAM      */
/**********************/
int main (int argc, char* argv[])
{
  int serial_fd;           //-- Serial port descriptor
  char data[CMD_LEN+1];    //-- The received command
  char message[128];
  int debug = 0;

  
  //-- Check if the serial device and message is given
  if (argc<3) {
    printf ("Parameters missing\n\r");
   printf ("Usage:\n\r");
   printf ("Usage: send_receive device message\n\r");               
    exit(0);
  }

  //-- Open the serial port
  serial_fd=serial_open(argv[1],B19200);   //-- The speed is configure at 9600 baud
  //-- Device error checking
  if (serial_fd==-1) {
    printf ("Error opening the serial device: %s\n",argv[1]);
    perror("OPEN");
    exit(0);
  }

  //-- Message error checking (HEX format)
  strcpy(message, argv[2]);               //Copy input parameter to message
  //if (check_message(message)==-1) {
    //printf ("Error with message:\n\r");
    //perror("OPEN");
    //exit(0);
  //}

  //-- Send the message to the serial port
  serial_send(serial_fd, message, strlen(message));
  if (debug == ON) printf ("String sent------> %s\n",message);
  
  //-- Wait for the received data
  int n;
  n=serial_read(serial_fd,data,CMD_LEN,TIMEOUT);
  
  //-- Show the received data
  if (debug == ON) printf ("String received--> ");
  fflush(stdout);
  
  if (n>0) {
    printf ("%s",data);
    if (debug == ON) printf ("%s (%d bytes)\n",data,n);
  }
  else {
    if (debug == ON) printf ("Timeout!\n");
  }
  
  //-- Close the serial port
  serial_close(serial_fd);

  return 0;
}
